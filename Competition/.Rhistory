sample_mean <- rep(NA, 5000)
for(i in 1:5000){}
for(i in 1:5000){
samp <- sample(area, 50)
sample_means50{i}<-mean(samp)
sample_means50{i} <- mean(samp)
for(i in 1:5000){
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
}
sample_means50 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
}
hist(sample_means50)
hist(sample_means50, breaks = 25)
summary(sample_means50)
sample_means_small <- rep(NA, 100)
?len
?length
length(sample_means_small)
for(i in 1:100){
samp <- sample(area, 50)
sample_means_small[i] <- mean(samp)
print(i)
}
hist(sample_means50)
sample_means10 <- rep(NA, 5000)
sample_means100 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(area, 10)
sample_means10[i] <- mean(samp)
samp <- sample(area, 100)
sample_means100[i] <- mean(samp)
}
par(mfrow = c(3, 1))
xlimits = range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimts)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
par(mfrow = c(3, 1))
xlimits = range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
load(url("http://www.openintro.org/stat/data/ames.RData"))
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
hist(samp)
sample_mean <- mean(samp)
se <- sd(samp)/sqrt(60)
lower <- sample_mean - 1.96 * se
upper <- sample_mean + 1.96 * se
c(lower, upper)
mean(population)
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n)
samp_mean[i] <- mean(samp)
samp_sd[i] <- sd(samp)
}
lower <- samp_mean - 1.96*samp_sd/sqrt(n)
upper <- samp_mean + 1.96*samp_sd/sqrt(n)
c(lower[1],upper[1])
plot_ci(lower, upper, mean(population))
install.packages('KernSmooth')
install.packages("KernSmooth")
library(KernSmooth)
getwd()
cd code
load(url("http://bit.ly/dasi_nc"))
source('~/.active-rstudio-document')
summary(nc)
gained_clean = na.omit(nc$gained)
n = length(gained_clean)
# The bootstrap
hist(gained_clean)
boot_means = rep(NA, 100)
for(i in 1:100){
boot_sample = sample(gained_clean, n, replace = TRUE)
boot_means[i] = mean(boot_sample)
}
hist(boot_means)
hist(gained_clean)
source("http://bit.ly/dasi_inference")
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.90, est = "mean", boot_method = "perc")
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.95, est = "median", boot_method = "se")
source('~/Code/Rprog/lab4_inference.R')
summary(nc)
?boxplot
boxplot(nc$weight)
?boxplot
by(nc$weight, nc$habit, mean)
boxplot(nc$weight, nc$habit)
boxplot(nc$weight)
## Hypothesis tests and confidence intervals
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical")
View(nc)
load(url("http://bit.ly/dasi_gss_ws_cl"))
summary(gss)
hist(gss$wordsum)
hist(gss$class)
inference(y = gss$wordsum, x = gss$class, est = "mean", type = "ht", alternative = "greater", method = "theoretical")
source('~/Code/Rprog/lab4_inference.R')
## Part A :  North Carolina births
source('~/Code/Rprog/lab4_inference.R')
load(url("http://bit.ly/dasi_gss_ws_cl"))
source('~/Code/Rprog/lab4_inference.R')
source('~/Code/Rprog/lab4_inference.R')
source("http://bit.ly/dasi_inference")
load(url("http://www.openintro.org/stat/data/atheism.RData"))
summary(atheism)
View(atheism)
us12 = subset(atheism, atheism$nationality == "United States" & atheism$year == "2012")
all12 = subset(atheism, atheism$year == '2012')
inference(us12$response, est = "proportion", type = "ci", method = "theoretical", success = "atheist")
n <- 1000
p <- seq(0, 1, 0.01)
me <- 2*sqrt(p*(1 - p)/n)
plot(me ~ p)
load(url("http://www.openintro.org/stat/data/mlb11.RData"))
summary(all12)
summary(atheism)
cor(mlb11$runs, mlb11$at_bats)
summary(mlb11)
source("http://www.openintro.org/stat/data/cdc.R")
names(cdc)
head(cdc)
tail(cdc)
summary(cdc$weight)
mean(cdc$weight)
var(cdc$weight)
median(cdc$weight)
table(cdc$smoke100)
barplot(table(cdc$smoke100))
smoke = table(cdc$smoke100)
barplot(smoke)
gender_smokers = table(cdc$gender,cdc$smoke100)
mosaicplot(gender_smokers)
dim(cdc)
cdc[1:10,]
cdc$weight
cdc$weight[1:10]
cdc$gender == 'm'
meta = subset(cdc, cdc$gender == 'm')
head(meta)
m_and_over30 = subset(cdc, cdc$gender == "m" & cdc$age > 30)
m_or_over30 = subset(cdc, cdc$gender == "m" | cdc$age > 30)
boxplot(cdc$height)
summary(cdc$height)
boxplot(cdc$height - cdc$gender)
boxplot(cdc$height ~ cdc$gender)
bmi = (cdc$weight / cdc$height^2) * 703
boxplot(bmi ~ cdc$genhlth)
hist(cdc$age)
hist(bmi)
hist(bmi, breaks = 50)
load(url("http://www.openintro.org/stat/data/kobe.RData"))
head(kobe)
kobe$basket[1:9]
kobe_streak <- calc_streak(kobe$basket)
barplot(table(kobe_streak))
outcomes <- c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
table(sim_fair_coin)
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
table(sim_unfair_coin)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 1, replace = TRUE)
kobe$basket
sim_basket
calc_streak(sim_basket)
sim_basket <- sample(outcomes, size = 100, replace = TRUE)
cal_streak(kobe$basket)
calc_streak(kobe$basket)
calc_streak(sim_basket)
sim_basket <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.45, 0.55))
calc_streak(kobe$basket)
calc_streak(sim_basket)
load(url("http://www.openintro.org/stat/data/ames.RData"))
area <- ames$Gr.Liv.Area
price <- ames$SalePrice
summary(area)
hist(area)
samp1 <- sample(area, 50)
mean(samp1)
for(i in 1:5000){
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
}
hist(sample_means50)
sample_means50 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
}
hist(sample_means50)
sample_means10 <- rep(NA, 5000)
sample_means100 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(area, 10)
sample_means10[i] <- mean(samp)
samp <- sample(area, 100)
sample_means100[i] <- mean(samp)
}
par(mfrow = c(3, 1))
xlimits = range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
par(mfrow = c(1, 1))
load(url("http://www.openintro.org/stat/data/ames.RData"))
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
sample_mean <- mean(samp)
se <- sd(samp)/sqrt(60)
lower <- sample_mean - 1.96 * se
upper <- sample_mean + 1.96 * se
c(lower, upper)
mean(population)
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the population
samp_mean[i] <- mean(samp)    # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp)        # save sample sd in ith element of samp_sd
}
lower <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower[1],upper[1])
plot_ci(lower, upper, mean(population))
source('~/Code/statistics_coursera/lab4_inference_for_numerical_data.R')
hist(boot_means)
inference(nc$gained, type = "ci", method = "simulation",
conflevel = 0.90, est = "mean", boot_method = "perc")
alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = gss$wordsum, x = gss$class, est = "mean", type = "ht", alternative = "greater", method = "theoretical")
source('~/Code/statistics_coursera/lab5_inference_for_categorical_data.R')
inference(us12$response, est = "proportion", type = "ci", method = "theoretical", success = "atheist")
plot(me ~ p)
load(url("http://www.openintro.org/stat/data/mlb11.RData"))
summary(all12)
summary(atheism)
summary(mlb11)
cor(mlb11$runs, mlb11$at_bats)
table(m1b11)
table(mlb11)
table(mlb11$runs,mlb11$at_bats)
runs_atbats = table(mlb11$runs,mlb11$at_bats)
hist(runs_atbats)
boxplot(runs_atbats)
barplot(runs_atbats)
scatterplot(runs_atbats)
plot(runs_atbats)
hist(runs_atbats)
boxplot(runs_atbats)
barplot(runs_atbats)
summary(mlb11$runs)
summary(mlb11)
head(mlb11)
plot(runs_atbats)
plot(mlb11$runs,mlb11$at_bats)
plot(mlb11$at_bats, mlb11$at_bats)
plot(mlb11$at_bats, mlb11$runs)
cor(mlb11$runs, mlb11$at_bats)
plot_ss(x = mlb11$at_bats, y = mlb11$runs)
plot_ss(x = mlb11$at_bats, y = mlb11$runs, showSquares = TRUE)
m1 <- lm(runs ~ at_bats, data = mlb11)
summary(ml)
summary(m1)
m2 <- lm(runs ~ homesruns, data = mlb11)
m2 <- lm(runs ~ homeruns, data = mlb11)
summary(m2)
plot(mlb11$runs ~ mlb11$at_bats)
abline(m1)
mlb11$runs[mlb11$at_bats == 5579]
m1(5579)
pred
pred = -2789.2429+0.6305*5579
plot(m1$residuals ~ mlb11$at_bats)
abline(h = 0, lty = 3)  # adds a horizontal dashed line at y = 0
hist(m1$residuals)
qqnorm(m1$residuals)
qqline(m1$residuals)  # adds diagonal line to the normal prob plot
?qqnorm
hist(m1$residuals)
qqnorm(m1$residuals)
qqline(m1$residuals)  # adds diagonal line to the normal prob plot
hist(m1$residuals)
m_hits <- lm(runs ~ hits, data = mlb11)
m_wins <- lm(runs ~ wins, data = mlb11)
m_bat <- lm(runs ~ bat_avg, data = mlb11)
plot(mlb11$runs ~ mlb11$hits)
abline(m_hits)
plot(mlb11$runs ~ mlb11$wins)
abline(m_wins)
plot(mlb11$runs ~ mlb11$bat)
abline(m_bat)
plot(mlb11$runs ~ mlb11$hits)
abline(m_hits)
plot(mlb11$runs ~ mlb11$wins)
abline(m_wins)
plot(mlb11$runs ~ mlb11$bat)
abline(m_bat)
m_hits
summary(m_hits)
summary(m_bat)
m_obs <- lm(runs ~ new_obs, data = mlb11)
m_slug <- lm(runs ~ new_slug, data = mlb11)
m_onbase <- lm(runs ~ new_onbase, data = mlb11)
summary(m_obs)
summary(m_slug)
summary(m_onbase)
load(url("http://www.openintro.org/stat/data/evals.RData"))
load(url("http://www.openintro.org/stat/data/evals.RData"))
summary(evals)
hist(evals$score)
plot(evals$score, evals$bty_avg)
plot(evals$bty_avg, evals$score)
plot(evals$bty_avg ~ evals$score)
plot(evals$score ~ evals$bty_avg)
? jitter()
plot(jitter(evals$score) ~ evals$bty_avg)
plot(evals$score ~ evals$bty_avg)
plot(jitter(evals$score) ~ evals$bty_avg)
m_bty = lm(score ~ bty_avg, data = evals)
abline(m_bty)
m_bty
m_bty <- lm(score ~ bty_avg, data = evals)
abline(m_bty)
m_bty
summary(m_bty)
hist(m_bty$residuals)
qqnorm(m_bty$residuals)
qqline(m_bty$residuals)  # adds diagonal line to the normal prob plot
hist(m_bty$residuals)
hist(m_bty$residuals)
x11()
qqnorm(m_bty$residuals)
qqline(m_bty$residuals)  # adds diagonal line to the normal prob plot
par(mfrow = c(3,1))
plot(jitter(evals$score) ~ evals$bty_avg)
m_bty <- lm(score ~ bty_avg, data = evals)
abline(m_bty)
summary(m_bty)
hist(m_bty$residuals)
qqnorm(m_bty$residuals)
qqline(m_bty$residuals)  # adds diagonal line to the normal prob plot
install.packages("XQuartz")
plot(m_bty$residuals ~ evals$bty_avg)
par(mfrow = c(1,1))
plot(m_bty$residuals ~ evals$bty_avg)
plot(evals$bty_avg ~ evals$bty_f1lower)
cor(evals$bty_avg, evals$bty_f1lower)
plot(evals[,13:19])
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
multiLines(m_bty_gen)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m_full)
x <- 1:4
y <- 2:3
x+y
hw1_data = read.csv('hw1_data.csv')
hw1_data = read.csv("hw1_data.csv")
pwd
hw1_data <- read.csv("~/Code/Rprog/hw1_data.csv")
View(hw1_data)
hw1_data <- read.csv("~/Code/Rprog/hw1_data.csv")
View(hw1_data)
is.na(hw1_data$Ozone)
sum(is.na(hw1_data$Ozone))
mean(hw1_data$Ozone)
mean(hw1_data$Ozone, na.rm=TRUE)
newdata <- subset(hw1_data, Ozone > 31 & Temp > 90,
select(c(Solar.R)))
newdata <- subset(hw1_data, Ozone > 31 & Temp > 90,
select= c(Solar.R))
View(newdata)
mean(newdata)
mean(newdata$Solar.R)
newdata19 <- subset(hw1_data, Month == 6)
mean(newdata19$Temp)
?max
max(hw1_data[which(hw1_data$Month ==5)]$Ozone)
newdata20 = hw1_data[which(hw1_data$Month ==5)]
newdata20 = hw1_data[which(hw1_data$Month ==5)]
newdata20 = subset(hw1_data, Month == 5)
max(newdata20$Ozone)
max(newdata20$Ozone, rm = True)
max(newdata20$Ozone, rm = TRUE)
max(newdata20$Ozone, na.rm = TRUE)
which(hw1_data$Month ==5)
hw1_data$Ozone[which(hw1_data$Month ==5)]
head(hw1_data)
summary(hw1_data)
length(hw1_data)
hw1_data$Ozone[47]
?length
install.packages('faraway')
install.packages('zoo')
install.packages('xts')
install.packages('PerformanceAnalytics')
source('~/Code/STAT615/Lab1/Lab1.1_STAT615_intro_to_R_p1.R')
source('~/Code/STAT615/Lab1/Lab1.2_STAT615_intro_to_R_p2.R')
source('~/Code/STAT615/Lab1/Lab1.3_STAT615_matrix_demo.R')
source('~/Code/STAT615/Lab1/Lab1.1_STAT615_intro_to_R_p1.R')
summary(stackloss$Air)
head(stackloss)
str(stackloss)
summary(stackloss)
data(stackloss)
stackloss
help(stackloss)
###
### Getting some numerical summaries
###
summary(stackloss)
stackloss$Air
stackloss[,1]
summary(stackloss$Air)
head(stackloss)
str(stackloss)
x = stackloss$Air
str(x)
help(str)
head(x)
mean(x)
median(x)
sd(x)
range(x)
min(x)
max(x)
quantile(x)
help(quantile)
quantile(x)
quantile(x, prob=0.90)
cor(stackloss)
help(cor)
###
###  Graphical Summaries
###
hist(x)
?hist
help(hist)
help.search("hist")
hist(x, main="Histogram of Air Flow", xlab="Flow of Cooling Air",freq=F)
boxplot(x)
y = stackloss$W
plot(x,y)
plot(y ~ x, xlab="Air Flow", ylab="Water Temp", pch=16)
plot(stackloss, pch=16)
plot(x,y)
plot(y ~ x, xlab="Air Flow", ylab="Water Temp", pch=8)
plot(y ~ x, xlab="Air Flow", ylab="Water Temp", pch=16)
plot(y ~ x, xlab="Air Flow", ylab="Water Temp", pch=16)
plot(stackloss, pch=16)
plot(stackloss, pch=16)
boxplot(stackloss)
par(mfrow=c(2,2))
boxplot(stackloss$Ai)
boxplot(stackloss$Wa)
boxplot(stackloss$Ac)
boxplot(stackloss$s)
par(mfrow=c(1,1))
chart.Correlation(stackloss)
stackloss[2,]
stackloss[,3]
stackloss[2,3]
c(1,2,4)
z = c(1,2,4)
z
stackloss[c(1,2,4),]
help(chart)
help('chart')
??chart
chart.Correlation(stackloss)
3:6
stackloss[3:6,]
stackloss[,-c(1,2)]
stackloss[stackloss$Ai > 72,]
stackloss[,-c(1,2)]
stackloss[,c(1,2)]
stackloss[,-c(1,2)]
-c(1,2)
stackloss[stackloss$Ai > 72,]
source('~/Code/STAT640/Lecture/lecture1_code.R')
source('~/Code/STAT640/Competition/PMbenchmark.R')
setwd("~/Code/STAT640/Competition")
source('~/Code/STAT640/Competition/PMbenchmark.R')
Pnum[,1:20]
Pnum[1:20,]
head(Pnum)
head(Psum)
head(Pmeans)
idmap[1:10,2]
source('~/Code/STAT640/Competition/PMbenchmark.R')
head(Pmeans)
